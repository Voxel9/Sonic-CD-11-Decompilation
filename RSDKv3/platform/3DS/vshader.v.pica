; Uniforms
.fvec mv[4]
.fvec p[4]
.fvec tex[4]

; Constants
.constf myconst(0.0, 1.0, 0.00390625, 0.0)
.alias  zeros  myconst.xxxx ; Vector full of zeros
.alias  ones   myconst.yyyy ; Vector full of ones
.alias  coldiv myconst.zzzz ; For byte-to-float color conversion

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; Inputs
.alias inpos v0
.alias intc0 v1
.alias inclr v2

.entry vmain
.proc vmain
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w, ones

    ; r1 = mv * inpos
	dp4 r1.x, mv[0], r0
	dp4 r1.y, mv[1], r0
	dp4 r1.z, mv[2], r0
	dp4 r1.w, mv[3], r0

	; outpos = p * mv
	dp4 outpos.x, p[0], r1
	dp4 outpos.y, p[1], r1
	dp4 outpos.z, p[2], r1
	dp4 outpos.w, p[3], r1

	; Force the w component of intc0 to be 1.0
	mov r2.xy, intc0
	mov r2.z, zeros
	mov r2.w, ones

	; outtc0 = tex * intc0
	dp4 outtc0.x, tex[0], r2
	dp4 outtc0.y, tex[1], r2
	dp4 outtc0.z, tex[2], r2
	dp4 outtc0.w, tex[3], r2

	mov r6.x, coldiv

	; outclr = inclr * coldiv
	mul outclr, inclr, r6.x

	; We're finished
	end
.end
